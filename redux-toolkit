# React Redux Toolkit Notes

## Core Concepts

1. **Store**: The single source of truth for your application's state.
2. **Slices**: Combines reducer logic and actions for a single feature.
3. **Reducers**: Functions that specify how the state changes in response to actions.
4. **Actions**: Objects that describe what happened in the app.
5. **Thunks**: A middleware for handling asynchronous logic.

## Key Redux Toolkit APIs

1. **configureStore()**: Simplifies store setup, automatically adds thunk middleware, and enables Redux DevTools Extension.
2. **createSlice()**: Generates action creators and action types based on reducer functions.
3. **createAsyncThunk()**: Generates thunks for handling async requests.
4. **createEntityAdapter()**: Provides methods for CRUD operations on normalized data.

## Basic Workflow with Redux Toolkit

1. Set up the store with configureStore().
2. Create slices for different features of your app using createSlice().
3. Export the action creators and reducer from each slice.
4. Use the React-Redux hooks (useSelector, useDispatch) in your components.
5. Dispatch actions to update state.

## Best Practices

1. Use createSlice() to organize related actions and reducers.
2. Utilize Redux Toolkit's built-in Immer integration for simpler immutable updates.
3. Use createAsyncThunk() for handling async operations.
4. Employ createEntityAdapter() for managing collections of items.
5. Use the Redux DevTools Extension for debugging.

## Example Snippets

### Creating a Store

```javascript
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './slices';

const store = configureStore({
  reducer: rootReducer
});

export default store;
```

### Defining a Slice

```javascript
import { createSlice } from '@reduxjs/toolkit';

const todoSlice = createSlice({
  name: 'todos',
  initialState: [],
  reducers: {
    addTodo: (state, action) => {
      state.push({ id: Date.now(), text: action.payload, completed: false });
    },
    toggleTodo: (state, action) => {
      const todo = state.find(todo => todo.id === action.payload);
      if (todo) {
        todo.completed = !todo.completed;
      }
    }
  }
});

export const { addTodo, toggleTodo } = todoSlice.actions;
export default todoSlice.reducer;
```

### Using createAsyncThunk

```javascript
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

export const fetchTodos = createAsyncThunk(
  'todos/fetchTodos',
  async () => {
    const response = await fetch('https://api.example.com/todos');
    return response.json();
  }
);

const todoSlice = createSlice({
  name: 'todos',
  initialState: { items: [], status: 'idle', error: null },
  reducers: {
    // ... other reducers
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchTodos.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchTodos.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchTodos.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  }
});
```

### Using Hooks in a Component

```javascript
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { addTodo, toggleTodo, fetchTodos } from './todoSlice';

function TodoList() {
  const todos = useSelector(state => state.todos.items);
  const status = useSelector(state => state.todos.status);
  const dispatch = useDispatch();

  React.useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchTodos());
    }
  }, [status, dispatch]);

  const handleAddTodo = (text) => {
    dispatch(addTodo(text));
  };

  const handleToggleTodo = (id) => {
    dispatch(toggleTodo(id));
  };

  // Render todos and add todo form
}
```

This setup demonstrates how Redux Toolkit simplifies Redux logic, reduces boilerplate, and provides powerful tools for common Redux use cases.
